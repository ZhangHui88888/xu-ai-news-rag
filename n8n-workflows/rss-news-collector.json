{
  "name": "RSS新闻采集工作流",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 */6 * * *"
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "定时触发-每6小时",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "=http://mysql:3306",
        "options": {
          "queryString": "SELECT * FROM data_source WHERE type='RSS' AND status=1"
        }
      },
      "id": "get-rss-sources",
      "name": "获取RSS源配置",
      "type": "n8n-nodes-base.mysql",
      "typeVersion": 2.4,
      "position": [440, 300],
      "credentials": {
        "mysql": {
          "id": "xu_news_mysql",
          "name": "MySQL - xu_news_rag"
        }
      }
    },
    {
      "parameters": {
        "url": "={{$json.url}}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "rss-feed-reader",
      "name": "读取RSS订阅",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [640, 300]
    },
    {
      "parameters": {
        "jsCode": "// 检查内容是否已存在（去重）\nconst items = $input.all();\nconst newItems = [];\n\nfor (const item of items) {\n  const url = item.json.link;\n  const title = item.json.title;\n  \n  // 检查URL是否已存在于数据库（通过后端API）\n  // 这里简化处理，实际应该调用后端API检查\n  if (url && title) {\n    newItems.push({\n      json: {\n        title: title,\n        link: url,\n        description: item.json.description || '',\n        pubDate: item.json.pubDate || new Date().toISOString(),\n        creator: item.json.creator || 'Unknown',\n        categories: item.json.categories || []\n      }\n    });\n  }\n}\n\nreturn newItems;"
      },
      "id": "deduplication",
      "name": "去重检查",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [840, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{$json.link}}",
        "options": {
          "timeout": 30000,
          "redirect": {
            "redirect": {
              "followRedirects": true,
              "maxRedirects": 5
            }
          }
        }
      },
      "id": "fetch-full-content",
      "name": "获取完整内容",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1040, 300]
    },
    {
      "parameters": {
        "jsCode": "// 使用正则和简单算法提取正文\nconst html = $input.item.json.body;\nconst metadata = $input.item.json;\n\n// 移除script和style标签\nlet content = html\n  .replace(/<script[^>]*>.*?<\\/script>/gis, '')\n  .replace(/<style[^>]*>.*?<\\/style>/gis, '')\n  .replace(/<!--.*?-->/gs, '');\n\n// 尝试提取article或main标签内容\nconst articleMatch = content.match(/<article[^>]*>(.*?)<\\/article>/is);\nif (articleMatch) {\n  content = articleMatch[1];\n} else {\n  const mainMatch = content.match(/<main[^>]*>(.*?)<\\/main>/is);\n  if (mainMatch) {\n    content = mainMatch[1];\n  }\n}\n\n// 移除所有HTML标签\nconst cleanText = content\n  .replace(/<[^>]+>/g, ' ')\n  .replace(/\\s+/g, ' ')\n  .trim();\n\n// 截取前5000字符作为内容\nconst maxLength = 5000;\nconst finalContent = cleanText.length > maxLength \n  ? cleanText.substring(0, maxLength) + '...'\n  : cleanText;\n\nreturn {\n  title: metadata.title,\n  content: finalContent,\n  sourceUrl: metadata.link,\n  publishedAt: metadata.pubDate,\n  author: metadata.creator,\n  tags: metadata.categories\n};"
      },
      "id": "extract-content",
      "name": "提取正文内容",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1240, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://192.168.171.1:11434/api/generate",
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "qwen2.5:3b"
            },
            {
              "name": "prompt",
              "value": "=请为以下新闻生成一个简洁的中文摘要（不超过200字）：\\n\\n标题：{{$json.title}}\\n\\n内容：{{$json.content}}\\n\\n只返回摘要内容，不要其他说明。"
            },
            {
              "name": "stream",
              "value": false
            }
          ]
        },
        "options": {
          "timeout": 60000
        }
      },
      "id": "generate-summary",
      "name": "AI生成摘要",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1440, 300]
    },
    {
      "parameters": {
        "jsCode": "// 解析Ollama返回的摘要\nconst response = $input.item.json;\nconst metadata = $input.item.json;\n\nlet summary = '';\nif (response.response) {\n  summary = response.response.trim();\n} else if (response.message && response.message.content) {\n  summary = response.message.content.trim();\n}\n\nreturn {\n  title: metadata.title,\n  content: metadata.content,\n  summary: summary || metadata.content.substring(0, 200),\n  sourceUrl: metadata.sourceUrl,\n  publishedAt: metadata.publishedAt,\n  author: metadata.author || 'Unknown',\n  tags: metadata.tags || [],\n  contentType: 'news',\n  dataSource: 'RSS'\n};"
      },
      "id": "process-summary",
      "name": "处理摘要结果",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1640, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://backend:8080/api/knowledge/import",
        "authentication": "none",
        "sendBody": true,
        "contentType": "json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{$json.title}}"
            },
            {
              "name": "content",
              "value": "={{$json.content}}"
            },
            {
              "name": "summary",
              "value": "={{$json.summary}}"
            },
            {
              "name": "sourceUrl",
              "value": "={{$json.sourceUrl}}"
            },
            {
              "name": "author",
              "value": "={{$json.author}}"
            },
            {
              "name": "tags",
              "value": "={{JSON.stringify($json.tags)}}"
            },
            {
              "name": "contentType",
              "value": "={{$json.contentType}}"
            },
            {
              "name": "dataSource",
              "value": "={{$json.dataSource}}"
            },
            {
              "name": "publishedAt",
              "value": "={{$json.publishedAt}}"
            }
          ]
        },
        "options": {}
      },
      "id": "save-to-backend",
      "name": "保存到后端",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1840, 300]
    },
    {
      "parameters": {
        "jsCode": "// 统计处理结果\nconst items = $input.all();\nconst successCount = items.filter(item => \n  item.json.statusCode === 200 || item.json.success === true\n).length;\n\nreturn {\n  timestamp: new Date().toISOString(),\n  totalProcessed: items.length,\n  successCount: successCount,\n  failedCount: items.length - successCount,\n  message: `RSS新闻采集完成: 成功 ${successCount}/${items.length}`\n};"
      },
      "id": "summary-stats",
      "name": "统计结果",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2040, 300]
    },
    {
      "parameters": {},
      "id": "error-trigger",
      "name": "错误处理",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [1240, 500]
    },
    {
      "parameters": {
        "jsCode": "// 记录错误日志\nconst error = $input.item.json.error;\nconst execution = $input.item.json.execution;\n\nconsole.error('RSS采集工作流错误:', error);\n\nreturn {\n  errorTime: new Date().toISOString(),\n  errorMessage: error?.message || 'Unknown error',\n  errorStack: error?.stack || '',\n  executionId: execution?.id || 'unknown'\n};"
      },
      "id": "log-error",
      "name": "记录错误",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1440, 500]
    }
  ],
  "connections": {
    "定时触发-每6小时": {
      "main": [[{"node": "获取RSS源配置", "type": "main", "index": 0}]]
    },
    "获取RSS源配置": {
      "main": [[{"node": "读取RSS订阅", "type": "main", "index": 0}]]
    },
    "读取RSS订阅": {
      "main": [[{"node": "去重检查", "type": "main", "index": 0}]]
    },
    "去重检查": {
      "main": [[{"node": "获取完整内容", "type": "main", "index": 0}]]
    },
    "获取完整内容": {
      "main": [[{"node": "提取正文内容", "type": "main", "index": 0}]]
    },
    "提取正文内容": {
      "main": [[{"node": "AI生成摘要", "type": "main", "index": 0}]]
    },
    "AI生成摘要": {
      "main": [[{"node": "处理摘要结果", "type": "main", "index": 0}]]
    },
    "处理摘要结果": {
      "main": [[{"node": "保存到后端", "type": "main", "index": 0}]]
    },
    "保存到后端": {
      "main": [[{"node": "统计结果", "type": "main", "index": 0}]]
    },
    "错误处理": {
      "main": [[{"node": "记录错误", "type": "main", "index": 0}]]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": ""
  },
  "staticData": null,
  "tags": [
    {
      "id": "rss-collector",
      "name": "RSS采集"
    },
    {
      "id": "news",
      "name": "新闻"
    },
    {
      "id": "ai",
      "name": "AI处理"
    }
  ],
  "pinData": {},
  "versionId": "1.0.0",
  "meta": {
    "instanceId": "xu-news-ai-rag"
  }
}

